name: Terraform CI

on:
  push:
    branches: [main, master]
    paths:
      - "terraform/**"
      - ".github/workflows/**"
  pull_request:
    branches: [main, master]
    paths:
      - "terraform/**"
      - ".github/workflows/**"
  schedule:
    - cron: "0 0 * * *" # Run daily at midnight

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  terraform:
    name: Terraform Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"
          terraform_wrapper: false

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend=false

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Post Format Results
        if: always() && github.event_name == 'pull_request' && steps.fmt.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            const output = `#### Terraform Format Check Failed 🔴
            Please run \`terraform fmt -recursive\` to fix formatting issues.`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Post Validation Results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const formatStatus = steps.fmt.outcome === 'success' ? '✅' : '❌';
            const initStatus = steps.init.outcome === 'success' ? '✅' : '❌';
            const validateStatus = steps.validate.outcome === 'success' ? '✅' : '❌';

            const output = `### Terraform Checks Summary
            * Format Check: ${formatStatus}
            * Init: ${initStatus}
            * Validate: ${validateStatus}

            ${steps.validate.outcome === 'failure' ? '⚠️ Please fix validation errors before merging.' : ''}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  security-scan:
    name: Security Scan
    needs: terraform
    uses: ./.github/workflows/kics-scan.yml
    permissions:
      contents: read
      security-events: write
      pull-requests: write

  summary:
    name: CI Summary
    needs: [terraform, security-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check Job Status
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const terraform = '${{ needs.terraform.result }}';
              const security = '${{ needs.security-scan.result }}';

              const summary = `### CI Pipeline Summary

              #### Terraform Checks
              - Status: ${terraform === 'success' ? '✅' : '❌'}

              #### Security Scan
              - Status: ${security === 'success' ? '✅' : '❌'}

              ${terraform !== 'success' || security !== 'success' ? '⚠️ Some checks failed. Please review the logs for details.' : '✅ All checks passed successfully!'}

              > Note: Detailed security scan results are available in the "Security" tab.`;

              // Only post comment on pull requests
              if (context.eventName === 'pull_request') {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: summary
                });
              }

              // Set step output regardless of event type
              core.setOutput('terraform_status', terraform);
              core.setOutput('security_status', security);
              
              // Fail the job if any checks failed
              if (terraform !== 'success' || security !== 'success') {
                core.setFailed('Some checks failed. Please review the logs for details.');
              }
            } catch (error) {
              console.error('Error in summary job:', error);
              core.setFailed(`Failed to process summary: ${error.message}`);
            }
